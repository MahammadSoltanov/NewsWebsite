@page
@model Presentation.Pages.Admin.Pos.AddPostModel
@{
    ViewBag.Title = "Add Post";
}
<!-- Main content -->
<section class="content">
    <form method="post">
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">Post information</h3>
                <div class="card-tools">
                    <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                        <i class="fas fa-minus"></i>
                    </button>
                </div>
            </div>

            <div class="card-body">
                <div class="form-group">
                    <label for="inputName">Category ID</label>
                    <select asp-for="CategoryId" class="form-control custom-select">
                        <option selected disabled>Select one</option>
                        @foreach (var categoryTranslation in Model.Categories)
                        {
                            <option value="@categoryTranslation.CategoryId">
                                <div> @categoryTranslation.CategoryId - @categoryTranslation.Title</div>
                            </option>
                        }
                    </select>
                    <span asp-validation-for="CategoryId" class="text-danger"></span>
                </div>
            </div>
            <!-- /.card-body -->
        </div>
        <br />
        <div class="card card-info">
            <div class="card-header">
                <h3 class="card-title">Default @Model.DefaultLanguage.Code translation</h3>

                <div class="card-tools">
                    <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                        <i class="fas fa-minus"></i>
                    </button>
                </div>
            </div>

            <div class="card-body">
                <div class="form-group">
                    <label for="inputName">Title</label>
                    <input type="text" asp-for="Title" class="form-control">
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input type="hidden" asp-for="TranslationContent" id="editorInput" />
                    <label for="inputDescription">Content</label>
                    <div id="editor"></div>
                    <span asp-validation-for="TranslationContent" class="text-danger"></span>
                </div>
                <input type="hidden" asp-for="LanguageId" />
                <div class="form-group">
                    <label for="inputName">Author ID</label>
                    <select asp-for="AuthorId" class="form-control custom-select">
                        <option selected disabled>Select one</option>
                        @foreach (var author in Model.Users)
                        {
                            <option value="@author.Id">
                                <div> @author.Id - @author.Name @author.Surname</div>
                            </option>
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <a asp-page="/Admin/Lists/Posts" class="btn btn-secondary">Cancel</a>
                <input asp-page-handler="Create" type="submit" value="Save Changes" class="btn btn-success float-right">
            </div>
        </div>
    </form>
</section>

@section Scripts
    {
    <script src="https://cdn.ckeditor.com/ckeditor5/39.0.0/classic/ckeditor.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/3.0.5/purify.min.js" integrity="sha512-KqUc2WMPF/gxte9xVjVE4TIt1LMUTidO3BrcItFg0Ro24I7pGNzgcXdnWdezNY+8T0/JEmdC79MuwYn+8UdOqw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://example.com/ckfinder/ckfinder.js"></script>
    <script src="@Html.Raw("https://cdn.jsdelivr.net/npm/@ckeditor/ckeditor5-upload@39.0.0/src/index.min.js")"></script>

    <script>
        class MyUploadAdapter {
            constructor(loader) {
                this.loader = loader;
            }

            upload() {
                return this.loader.file
                    .then(file => new Promise((resolve, reject) => {
                        this._initRequest();
                        this._initListeners(resolve, reject, file);
                        this._sendRequest(file);
                    }));
            }

            abort() {
                if (this.xhr) {
                    this.xhr.abort();
                }
            }

            _initRequest() {
                const xhr = this.xhr = new XMLHttpRequest();

                xhr.open('POST', '/Image/UploadImage', true);
                xhr.responseType = 'json';
            }

            _initListeners(resolve, reject, file) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `Couldn't upload file: ${file.name}.`;

                xhr.addEventListener('error', () => reject(genericErrorText));
                xhr.addEventListener('abort', () => reject());
                xhr.addEventListener('load', () => {
                    const response = xhr.response;

                    if (!response || response.error) {
                        return reject(response && response.error ? response.error.message : genericErrorText);
                    }

                    resolve({
                        default: response.url
                    });
                });

                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', evt => {
                        if (evt.lengthComputable) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    });
                }
            }

            _sendRequest(file) {
                const data = new FormData();

                data.append('upload', file);

                this.xhr.send(data);
            }
        }

        function MyCustomUploadAdapterPlugin(editor) {
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                return new MyUploadAdapter(loader);
            };
        }

        ClassicEditor
            .create(document.querySelector('#editor'),
                {
                    extraPlugins: [MyCustomUploadAdapterPlugin],
                })
            .then(editor => {
                editor.model.document.on('change:data', () => {
                    syncContent(editor.getData());
                });
            })
            .catch(error => {
                console.error(error);
            });

        function syncContent(content) {
            const contentWithoutNbsp = content.replace(/&nbsp;/g, '');

            const sanitizedContent = DOMPurify.sanitize(contentWithoutNbsp);
            document.querySelector('#editorInput').value = sanitizedContent;
        }
    </script>
}

@section Links
    {

}

